<?php

namespace Laragrad\Uuid\Support;

use Carbon\Carbon;

class Uuid
{
    /**
     * Generate UUID with next structure:
     *
     * SSSSSSSS-UUUU-UAAA-EEEE-RRRRRRRRRRRR
     *
     *   S - seconds
     *   U - microseconds
     *   A - appCode
     *   E - entityCode
     *   R - random
     *
     * @param int $entityCode
     * @param int $appCode
     * @return string
     */
    public static function genUuid(int $entityCode = 0, int $appCode = 0)
    {
        $mt = preg_split("/(\s|\.)/", microtime());

        $micro = str_pad(dechex(substr($mt[1], 1, 6)), 5, '0', STR_PAD_LEFT);

        return
            str_pad(dechex($mt[2]), 8, '0', STR_PAD_LEFT) . '-' .
            substr($micro, 0, 4) . '-' . substr($micro, -1) .
            str_pad(dechex($appCode), 3, '0', STR_PAD_LEFT) . '-' .
            str_pad(dechex($entityCode), 4, '0', STR_PAD_LEFT) . '-' .
            static::randomHex(6);

    }

    /**
     * Generates random Hex-string
     *
     * @param $bytes
     * @return string
     * @throws \Exception
     */
    protected static function randomHex($bytes = 4) {
        $random = random_bytes(6);
        $random[0] = pack("C", ord($random[0]) | 1);

        return bin2hex($random);
    }

    /**
     * Retrieves timestamp
     * from 1-13 digits of UUID generated by self::genUuid()
     *
     * @param string $uuid
     * @param string $format
     * @return DateTime|\Carbon\Carbon|string
     */
    public static function getUuidTimestamp(string $uuid, string $format = 'Carbon')
    {

        $tz = date_default_timezone_get();

        $uuid = str_replace('-', '', $uuid);
        $ts = hexdec(substr($uuid, 0, 8)).'.'.substr(sprintf("%'.06d", hexdec(substr($uuid, 8, 5))), -6);

        if ($format == 'DateTime') {

            return \DateTime::createFromFormat('U.u', $ts)->setTimezone(new \DateTimeZone($tz));

        } elseif ($format == 'Carbon') {

            return Carbon::createFromFormat('U.u', $ts)->timezone($tz);

        }

        return Carbon::createFromFormat('U.u', $ts)->timezone($tz)->format($format);
    }

    /**
     * Retrieves application code
     * from 14-16 digits of UUID generated by self::genUuid()
     *
     * @param string $uuid
     * @return int
     */
    public static function getUuidAppCode(string $uuid) : int
    {
        return (int) hexdec(substr($uuid, 15, 3));
    }

    /**
     * Retrieves application code
     * from 14-16 digits of UUID generated by self::genUuid()
     *
     * @param string $uuid
     * @return int
     */
    public static function getUuidEntityCode(string $uuid) : int
    {
        return (int) hexdec(substr($uuid, 19, 4));
    }

    /**
     * Convert int-timestamp to hex-string
     *
     * @param int $timestamp
     * @return string
     */
    public static function timestampHex(int $timestamp = null)
    {
        $timestamp = $timestamp ?? now()->timestamp;

        return str_pad(dechex($timestamp), 8, '0', STR_PAD_LEFT);
    }

    /**
     * Convert int-microseconds to hex-string
     *
     * @param int $timestamp
     * @return string
     */
    public static function microHex(int $micro = null)
    {
        $micro = $micro ?? now()->micro;

        return str_pad(dechex($micro), 5, '0', STR_PAD_LEFT);
    }
}